{"ast":null,"code":"export const formatMetadata = metadata => {\n  // Example helper: format metadata for display\n  // This can be expanded based on specific formatting needs\n  if (!metadata) return {};\n  const formatted = {};\n  for (const key in metadata) {\n    if (Object.hasOwnProperty.call(metadata, key)) {\n      let value = metadata[key];\n      // Example: If a value is an array, join it with a comma\n      if (Array.isArray(value)) {\n        value = value.join(', ');\n      }\n      // Example: Capitalize keys for display\n      const formattedKey = key.replace(/([A-Z])/g, ' $1').replace(/^./, function (str) {\n        return str.toUpperCase();\n      });\n      formatted[formattedKey] = value;\n    }\n  }\n  return formatted;\n};\nexport const getFileExtension = filename => {\n  return filename.split('.').pop();\n};\nexport const getFileNameWithoutExtension = filename => {\n  const parts = filename.split('.');\n  if (parts.length > 1) {\n    parts.pop();\n    return parts.join('.');\n  }\n  return filename;\n};","map":{"version":3,"names":["formatMetadata","metadata","formatted","key","Object","hasOwnProperty","call","value","Array","isArray","join","formattedKey","replace","str","toUpperCase","getFileExtension","filename","split","pop","getFileNameWithoutExtension","parts","length"],"sources":["D:/Backend/MetaDataExtractor/frontend/src/utils/helpers.js"],"sourcesContent":["export const formatMetadata = (metadata) => {\n    // Example helper: format metadata for display\n    // This can be expanded based on specific formatting needs\n    if (!metadata) return {};\n\n    const formatted = {};\n    for (const key in metadata) {\n      if (Object.hasOwnProperty.call(metadata, key)) {\n        let value = metadata[key];\n        // Example: If a value is an array, join it with a comma\n        if (Array.isArray(value)) {\n          value = value.join(', ');\n        }\n        // Example: Capitalize keys for display\n        const formattedKey = key.replace(/([A-Z])/g, ' $1').replace(/^./, function(str){ return str.toUpperCase(); });\n        formatted[formattedKey] = value;\n      }\n    }\n    return formatted;\n  };\n  \n  export const getFileExtension = (filename) => {\n    return filename.split('.').pop();\n  };\n  \n  export const getFileNameWithoutExtension = (filename) => {\n    const parts = filename.split('.');\n    if (parts.length > 1) {\n      parts.pop();\n      return parts.join('.');\n    }\n    return filename;\n  };"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAIC,QAAQ,IAAK;EACxC;EACA;EACA,IAAI,CAACA,QAAQ,EAAE,OAAO,CAAC,CAAC;EAExB,MAAMC,SAAS,GAAG,CAAC,CAAC;EACpB,KAAK,MAAMC,GAAG,IAAIF,QAAQ,EAAE;IAC1B,IAAIG,MAAM,CAACC,cAAc,CAACC,IAAI,CAACL,QAAQ,EAAEE,GAAG,CAAC,EAAE;MAC7C,IAAII,KAAK,GAAGN,QAAQ,CAACE,GAAG,CAAC;MACzB;MACA,IAAIK,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;QACxBA,KAAK,GAAGA,KAAK,CAACG,IAAI,CAAC,IAAI,CAAC;MAC1B;MACA;MACA,MAAMC,YAAY,GAAGR,GAAG,CAACS,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,UAASC,GAAG,EAAC;QAAE,OAAOA,GAAG,CAACC,WAAW,CAAC,CAAC;MAAE,CAAC,CAAC;MAC7GZ,SAAS,CAACS,YAAY,CAAC,GAAGJ,KAAK;IACjC;EACF;EACA,OAAOL,SAAS;AAClB,CAAC;AAED,OAAO,MAAMa,gBAAgB,GAAIC,QAAQ,IAAK;EAC5C,OAAOA,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC;AAClC,CAAC;AAED,OAAO,MAAMC,2BAA2B,GAAIH,QAAQ,IAAK;EACvD,MAAMI,KAAK,GAAGJ,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC;EACjC,IAAIG,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;IACpBD,KAAK,CAACF,GAAG,CAAC,CAAC;IACX,OAAOE,KAAK,CAACV,IAAI,CAAC,GAAG,CAAC;EACxB;EACA,OAAOM,QAAQ;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}