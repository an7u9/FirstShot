{"ast":null,"code":"import { API_BASE_URL } from './constants';\nexport const extractMetadata = async file => {\n  const formData = new FormData();\n  formData.append('file', file);\n  try {\n    const response = await fetch(`${API_BASE_URL}/extract-metadata`, {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to extract metadata');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('API Error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","extractMetadata","file","formData","FormData","append","response","fetch","method","body","ok","errorData","json","Error","message","error","console"],"sources":["D:/Backend/MetaDataExtractor/frontend/src/utils/api.js"],"sourcesContent":["import { API_BASE_URL } from './constants';\n\nexport const extractMetadata = async (file) => {\n  const formData = new FormData();\n  formData.append('file', file);\n\n  try {\n    const response = await fetch(`${API_BASE_URL}/extract-metadata`, {\n      method: 'POST',\n      body: formData,\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to extract metadata');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('API Error:', error);\n    throw error;\n  }\n};"],"mappings":"AAAA,SAASA,YAAY,QAAQ,aAAa;AAE1C,OAAO,MAAMC,eAAe,GAAG,MAAOC,IAAI,IAAK;EAC7C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EAE7B,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,mBAAmB,EAAE;MAC/DQ,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEN;IACR,CAAC,CAAC;IAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,4BAA4B,CAAC;IACpE;IAEA,OAAO,MAAMR,QAAQ,CAACM,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;IAClC,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}